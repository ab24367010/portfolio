document.addEventListener('DOMContentLoaded', () => {
    // DOM —ç–ª–µ–º–µ–Ω—Ç“Ø“Ø–¥–∏–π–≥ —Å–æ–Ω–≥–æ—Ö
    const chatbotContainer = document.getElementById('chatbot-container');
    const chatbotToggleBtn = document.getElementById('chatbot-toggle');
    const chatbotOpenBtn = document.getElementById('chatbot-open-btn');
    const chatbotMessages = document.getElementById('chatbot-messages');
    const chatbotOptions = document.getElementById('chatbot-options');
    const chatbotHeader = document.querySelector('.chatbot-header');
    const menuBtn = document.getElementById('menu-btn');
    const menu = document.getElementById('menu');

    // Hamburger menu-–Ω–∏–π event listener
    if (menuBtn && menu) {
        menuBtn.addEventListener('click', () => {
            menu.classList.toggle('hidden');
        });
    }

    let chatbotData = {}; // JSON-–æ–æ—Å –∞—á–∞–∞–ª—Å–∞–Ω –º—ç–¥—ç—ç–ª—ç–ª
    let currentStep = 0;

    // –ú–µ—Å—Å–µ–∂ –Ω—ç–º—ç—Ö —Ñ—É–Ω–∫—Ü
    function displayMessage(sender, message) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', sender);
        messageElement.textContent = message;
        chatbotMessages.appendChild(messageElement);
        chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    // –¢–æ–≤—á–ª—É—É—Ä—É—É–¥ “Ø“Ø—Å–≥—ç—Ö —Ñ—É–Ω–∫—Ü
    function displayOptions(options) {
        chatbotOptions.innerHTML = ''; // ”®–º–Ω”©—Ö —Å–æ–Ω–≥–æ–ª—Ç—É—É–¥—ã–≥ –∞—Ä–∏–ª–≥–∞—Ö
        options.forEach(option => {
            const btn = document.createElement('button');
            btn.textContent = option.text;
            btn.className = 'bg-gray-700 hover:bg-gray-600 text-white rounded px-3 py-2 cursor-pointer w-full text-left transition';
            btn.addEventListener('click', () => handleOptionClick(option.id));
            chatbotOptions.appendChild(btn);
        });
    }

    // –¢–æ–≤—á–ª—É—É—Ä –¥—ç—ç—Ä –¥–∞—Ä–∞—Ö–∞–¥ –∞–∂–∏–ª–ª–∞—Ö —Ñ—É–Ω–∫—Ü
    function handleOptionClick(optionId) {
        const selectedOption = findOptionById(optionId);
        if (selectedOption) {
            displayMessage('user', selectedOption.text);
        }

        if (chatbotData.answers && chatbotData.answers[optionId]) {
            setTimeout(() => {
                displayMessage('bot', chatbotData.answers[optionId]);
            }, 300);
        } else {
            setTimeout(() => {
                displayMessage('bot', '–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π.');
            }, 300);
        }

        currentStep++;
        const nextOptions = chatbotData.steps[currentStep]?.[optionId] || [];

        if (nextOptions.length > 0) {
            setTimeout(() => {
                displayOptions(nextOptions);
            }, 800);
        } else {
            setTimeout(() => {
                displayMessage('bot', '–Ø—Ä–∏–∞ –¥—É—É—Å–ª–∞–∞. –®–∏–Ω—ç –∞—Å—É—É–ª—Ç —Å–æ–Ω–≥–æ–Ω–æ —É—É. üëá');
                currentStep = 0;
                chatbotOptions.innerHTML = '';
                displayOptions(chatbotData.steps[0].questions);
            }, 2000);
        }
    }

    // ID-–∞–∞—Ä —Å–æ–Ω–≥–æ–ª—Ç—ã–≥ –æ–ª–æ—Ö —Ç—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü
    function findOptionById(id) {
        for (const step of chatbotData.steps) {
            for (const key in step) {
                if (Array.isArray(step[key])) {
                    const found = step[key].find(opt => opt.id === id);
                    if (found) return found;
                }
            }
        }
        return null;
    }

    // JSON-–∞–∞—Å –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞—á–∞–∞–ª–∂ —ç—Ö–ª—ç—Ö —Ñ—É–Ω–∫—Ü
    async function loadChatbotData() {
        try {
            const response = await fetch('data.json');
            if (!response.ok) throw new Error(`HTTP –∞–ª–¥–∞–∞: ${response.status}`);
            chatbotData = await response.json();

            displayMessage('bot', '–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! –°–æ–Ω–≥–æ–ª—Ç–æ–æ—Å –Ω—ç–≥–∏–π–≥ —Å–æ–Ω–≥–æ–Ω–æ —É—É.');
            displayOptions(chatbotData.steps[0].questions);
        } catch (error) {
            console.error(error);
            displayMessage('bot', '–ß–∞—Ç–±–æ—Ç—ã–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞—á–∞–∞–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π.');
        }
    }

    // –ß–∞—Ç–±–æ—Ç—ã–Ω –Ω—ç—ç—Ö/—Ö–∞–∞—Ö —Ç–æ–≤—á–ª—É—É—Ä—ã–Ω event listener-—É—É–¥
    chatbotToggleBtn.addEventListener('click', () => {
        chatbotContainer.classList.add('closed');
        chatbotContainer.classList.remove('open');
        chatbotOpenBtn.style.display = 'block';
    });

    chatbotOpenBtn.addEventListener('click', () => {
        chatbotContainer.classList.remove('closed');
        chatbotContainer.classList.add('open');
        chatbotOpenBtn.style.display = 'none';
    });

    // –ß–∞—Ç–±–æ—Ç—ã–≥ —á–∏—Ä—ç—Ö —Ñ—É–Ω–∫—Ü
    let isDragging = false;
    let offsetX, offsetY;

    chatbotHeader.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - chatbotContainer.getBoundingClientRect().left;
        offsetY = e.clientY - chatbotContainer.getBoundingClientRect().top;
        chatbotContainer.style.cursor = 'grabbing';
    });

    document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        const newX = e.clientX - offsetX;
        const newY = e.clientY - offsetY;
        chatbotContainer.style.left = `${newX}px`;
        chatbotContainer.style.top = `${newY}px`;
        chatbotContainer.style.right = 'auto';
        chatbotContainer.style.bottom = 'auto';
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
        chatbotContainer.style.cursor = 'grab';
    });

    // –≠—Ö–ª—ç—Ö
    loadChatbotData();
    chatbotContainer.classList.add('closed');
});